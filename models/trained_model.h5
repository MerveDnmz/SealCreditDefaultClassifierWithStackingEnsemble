import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from ucimlrepo import fetch_ucirepo
from seal import EncryptionParameters, SEALContext, KeyGenerator, Encryptor, Decryptor, CKKSEncoder, Plaintext, Ciphertext, scheme_type, CoeffModulus

def build_model(input_dim):
    model = Sequential()
    model.add(Dense(64, activation='relu', input_dim=input_dim))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))  # Assuming binary classification
    model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
    return model

def train_neural_network():
    # Load dataset
    default_of_credit_card_clients = fetch_ucirepo(id=350)
    X = default_of_credit_card_clients.data.features
    y = default_of_credit_card_clients.data.targets

    # Split the dataset
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Build the model
    model = build_model(X_train.shape[1])

    # Train the model
    model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.2)

    # Save the trained model
    model.save('/Users/mervedonmez/Documents/VSProjects/SealExample3/models/trained_model.h5')

if __name__ == "__main__":
    train_neural_network()